# Perform hierarchical clustering on the basis matrix
hclust_result <- hclust(dist(cor(basis_matrix)))
# Cut the dendrogram into clusters (adjust the number of clusters as needed)
num_clusters <- 3
clusters <- cutree(hclust_result, k = num_clusters)
# Visualize the clusters in a color vector
cluster_colors <- rainbow(num_clusters)
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = list(Cluster = sample_colors))
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["Pathology"],
annotation_colors = list(Pathology = c("WHO I" = "red", "WHO II" = "green", "WHO III" = "blue"))
)
# Extract the basis matrix from the NMF result
nmf_result <- nmf(countData_top, rank = 3, nrun = 1000)
basis_matrix <- basis(nmf_result)
# Perform hierarchical clustering on the basis matrix
hclust_result <- hclust(dist(cor(basis_matrix)))
# Cut the dendrogram into clusters (adjust the number of clusters as needed)
num_clusters <- 3
clusters <- cutree(hclust_result, k = num_clusters)
library( "DESeq2" )
library(ggplot2)
countData <- read.csv('gene_count_matrix.csv', header = TRUE, sep = ",")
countData <- data.frame(countData[,-1], row.names = countData[,1])
head(countData)
metaData <- read.csv('GSE136661r.csv', header = TRUE, sep = ",")
metaData <- data.frame(metaData[,-1], row.names = metaData[,1])
head(metaData)
# Reorder the columns with the metadata so it all matches
countData <- countData[, rownames(metaData)]
head(countData)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metaData,
design = ~ Pathology)
dds
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metaData,
design = ~ Pathology)
dds
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dds
dds <- DESeq(dds)
res <- results(dds)
res
resOrdered <- res[order(res$pvalue),]
summary(res)
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="Pathology") #using the DESEQ2 plotPCA fxn we can
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
hist(res$pvalue, breaks=20, col="grey50", border="white")
library(NMF)
library(pheatmap)
# Assuming 'results' is a DESeqResults object
top_genes <- head(order(res$log2FoldChange, decreasing = TRUE), 340)
countData_top <- countData[top_genes, ]
head(countData_top)
all(rowSums(countData_top) != 0)
all(colSums(countData_top) != 0)
countData_top <- countData_top[rowSums(countData_top) != 0, ]
countData_top <- log2(countData_top + 1)  # Adding 1 to avoid log(0)
all(rowSums(countData_top) != 0)
all(colSums(countData_top) != 0)
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["Pathology"],
annotation_colors = list(Pathology = c("WHO I" = "red", "WHO II" = "green", "WHO III" = "blue"))
)
# Extract the basis matrix from the NMF result
nmf_result <- nmf(countData_top, rank = 3, nrun = 1000)
basis_matrix <- basis(nmf_result)
# Perform hierarchical clustering on the basis matrix
hclust_result <- hclust(dist(cor(basis_matrix)))
# Cut the dendrogram into clusters (adjust the number of clusters as needed)
num_clusters <- 3
clusters <- cutree(hclust_result, k = num_clusters)
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow", "pink", "lavender")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = list(Cluster = sample_colors))
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow", "pink")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = list(Cluster = sample_colors))
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = list(Cluster = sample_colors))
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow", "pink", "lavender")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",)
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow", "pink", "lavender")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
labels_row = FALSE,  # Do not display row labels
labels_col = FALSE   # Do not display column labels
)
View(heatmap_data)
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow", "pink", "lavender")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE   # Do not display column labels
)
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["Pathology"],
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE,   # Do not display column labels
annotation_colors = list(Pathology = c("WHO I" = "red", "WHO II" = "green", "WHO III" = "blue"))
)
plotMA(results, main="MA Plot", ylim=c(-2,2))
plotMA(res, ylim=c(-2,2))
write.csv(as.data.frame(resOrdered),
file="condition_treated_results.csv")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("Pathology","Sex")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
ntd <- normTransform(dds)
library("vsn")
library(vsn)
install.packages("vsn")
BiocManager::install("vsn")
library("vsn")
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("Pathology","Sex")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("Pathology","Sex")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE, show_colnames=FALSE,
cluster_cols=FALSE, annotation_col=df)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("Pathology","Sex")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, show_colnames=FALSE,
cluster_cols=FALSE, annotation_col=df)
setwd("C:/Users/vijay/Desktop/DH307/prepDE_GSE221429")
library( "DESeq2" )
library(ggplot2)
countData <- read.csv('gene_count_matrix.csv', header = TRUE, sep = ",")
countData <- data.frame(countData[,-1], row.names = countData[,1])
head(countData)
metaData <- read.csv('GSE221429.csv', header = TRUE, sep = ",")
metaData <- data.frame(metaData[,-1], row.names = metaData[,1])
head(metaData)
# Reorder the columns with the metadata so it all matches
countData <- countData[, rownames(metaData)]
library( "DESeq2" )
library(ggplot2)
countData <- read.csv('gene_count_matrix.csv', header = TRUE, sep = ",")
countData <- data.frame(countData[,-1], row.names = countData[,1])
head(countData)
metaData <- read.csv('GSE221429.csv', header = TRUE, sep = ",")
metaData <- data.frame(metaData[,-1], row.names = metaData[,1])
head(metaData)
# Reorder the columns with the metadata so it all matches
countData <- countData[, rownames(metaData)]
head(countData)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metaData,
design = ~ Pathology)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metaData,
design = ~ genotype)
dds
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metaData,
design = ~ genotype)
dds
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dds
dds <- DESeq(dds)
res <- results(dds)
res
resOrdered <- res[order(res$pvalue),]
summary(res)
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="genotype") #using the DESEQ2 plotPCA fxn we can
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
hist(res$pvalue, breaks=20, col="grey50", border="white")
library(NMF)
library(pheatmap)
# Assuming 'results' is a DESeqResults object
top_genes <- head(order(res$log2FoldChange, decreasing = TRUE), 340)
countData_top <- countData[top_genes, ]
head(countData_top)
all(rowSums(countData_top) != 0)
all(colSums(countData_top) != 0)
countData_top <- countData_top[rowSums(countData_top) != 0, ]
countData_top <- log2(countData_top + 1)  # Adding 1 to avoid log(0)
all(rowSums(countData_top) != 0)
all(colSums(countData_top) != 0)
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["Pathology"],
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE,   # Do not display column labels
annotation_colors = list(Pathology = c("WHO I" = "red", "WHO II" = "green", "WHO III" = "blue"))
)
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["Pathology"],
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE,   # Do not display column labels
annotation_colors = list(Pathology = c("red", "green", "blue"))
)
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["Pathology"],
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE,   # Do not display column labels
)
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["genotype"],
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE,   # Do not display column labels
annotation_colors = list(Pathology = c( "NF2 loss/mut"="red","TRAF7/AKT1 mut" ="green", "TRAF7/KLF4 mut" = "blue"))
)
# Extract the basis matrix from the NMF result
nmf_result <- nmf(countData_top, rank = 3, nrun = 1000)
basis_matrix <- basis(nmf_result)
# Perform hierarchical clustering on the basis matrix
hclust_result <- hclust(dist(cor(basis_matrix)))
# Cut the dendrogram into clusters (adjust the number of clusters as needed)
num_clusters <- 3
clusters <- cutree(hclust_result, k = num_clusters)
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow", "pink", "lavender")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE   # Do not display column labels
)
plotMA(res, ylim=c(-2,2))
write.csv(as.data.frame(resOrdered),
file="condition_treated_results.csv")
library("vsn")
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("Pathology","Sex")])
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("genotype")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, show_colnames=FALSE,
cluster_cols=FALSE, annotation_col=df)
library("vsn")
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("genotype")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, show_colnames=FALSE,
cluster_cols=FALSE, annotation_col=df)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,"genotype"])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, show_colnames=FALSE,
cluster_cols=FALSE, annotation_col=df)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[, "genotype"])
# Subsetting the annotation column based on the selected genes
df_subset <- df[rownames(assay(ntd)[select, ]), , drop = FALSE]
# Creating a matrix of colors for annotation
colors_matrix <- matrix(df_subset$genotype, nrow = 1)
select <- order(rowMeans(counts(dds, normalized = TRUE)),
decreasing = TRUE)[1:20]
# Extracting the genotype information from colData
df <- as.data.frame(colData(dds)[, "genotype"])
# Subsetting the annotation column based on the selected genes
df_subset <- df[rownames(assay(ntd)[select, ]), , drop = FALSE]
# Check if df_subset is not NULL before creating the matrix
if (!is.null(df_subset)) {
# Creating a matrix of colors for annotation
colors_matrix <- matrix(df_subset$genotype, nrow = 1)
# Plotting the heatmap
pheatmap(assay(ntd)[select, ],
cluster_rows = FALSE,
show_rownames = TRUE,
show_colnames = FALSE,
cluster_cols = FALSE,
annotation_col = list(Genotype = colors_matrix))
} else {
# Handle the case where df_subset is NULL
warning("No matching rows found in df_subset.")
}
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)["genotype"])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, show_colnames=FALSE,
cluster_cols=FALSE, annotation_col=df)
library( "DESeq2" )
library(ggplot2)
countData <- read.csv('transcript_count_matrix.csv', header = TRUE, sep = ",")
countData <- data.frame(countData[,-1], row.names = countData[,1])
head(countData)
metaData <- read.csv('GSE221429.csv', header = TRUE, sep = ",")
metaData <- data.frame(metaData[,-1], row.names = metaData[,1])
head(metaData)
# Reorder the columns with the metadata so it all matches
countData <- countData[, rownames(metaData)]
head(countData)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metaData,
design = ~ genotype)
dds
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metaData,
design = ~ genotype)
dds
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dds
dds <- DESeq(dds)
res <- results(dds)
res
resOrdered <- res[order(res$pvalue),]
summary(res)
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="genotype") #using the DESEQ2 plotPCA fxn we can
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
hist(res$pvalue, breaks=20, col="grey50", border="white")
library(NMF)
library(pheatmap)
# Assuming 'results' is a DESeqResults object
top_genes <- head(order(res$log2FoldChange, decreasing = TRUE), 340)
countData_top <- countData[top_genes, ]
head(countData_top)
all(rowSums(countData_top) != 0)
all(colSums(countData_top) != 0)
countData_top <- countData_top[rowSums(countData_top) != 0, ]
countData_top <- log2(countData_top + 1)  # Adding 1 to avoid log(0)
all(rowSums(countData_top) != 0)
all(colSums(countData_top) != 0)
# Assuming 'dds' is a DESeqDataSet object
count_data <- counts(dds)
# Extract count data for the top genes
count_data <- count_data[top_genes,]
# Assuming 'metaData' contains sample information
heatmap_data <- countData_top
# Customize the heatmap as needed
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = metaData["genotype"],
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE,   # Do not display column labels
annotation_colors = list(Pathology = c( "NF2 loss/mut"="red","TRAF7/AKT1 mut" ="green", "TRAF7/KLF4 mut" = "blue"))
)
# Extract the basis matrix from the NMF result
nmf_result <- nmf(countData_top, rank = 3, nrun = 1000)
basis_matrix <- basis(nmf_result)
# Perform hierarchical clustering on the basis matrix
hclust_result <- hclust(dist(cor(basis_matrix)))
# Cut the dendrogram into clusters (adjust the number of clusters as needed)
num_clusters <- 3
clusters <- cutree(hclust_result, k = num_clusters)
# Visualize the clusters in a color vector
cluster_colors <- c("lightyellow", "pink", "lavender")
# Create a color vector for samples based on their cluster assignment
sample_colors <- cluster_colors[clusters]
# Visualize the heatmap with sample colors
pheatmap(heatmap_data,
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
show_rownames = FALSE,  # Do not display row labels
show_colnames = FALSE   # Do not display column labels
)
plotMA(res, ylim=c(-2,2))
write.csv(as.data.frame(resOrdered),
file="condition_treated_results.csv")
library("vsn")
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)["genotype"])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=TRUE, show_colnames=FALSE,
cluster_cols=FALSE, annotation_col=df)
